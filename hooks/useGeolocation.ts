'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\nexport interface GeolocationCoordinates {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n  altitude?: number | null;\n  altitudeAccuracy?: number | null;\n  heading?: number | null;\n  speed?: number | null;\n}\n\nexport interface GeolocationState {\n  location: GeolocationCoordinates | null;\n  loading: boolean;\n  error: string | null;\n  supported: boolean;\n}\n\nexport interface UseGeolocationOptions {\n  enableHighAccuracy?: boolean;\n  timeout?: number;\n  maximumAge?: number;\n  watch?: boolean;\n  immediate?: boolean;\n}\n\nconst DEFAULT_OPTIONS: UseGeolocationOptions = {\n  enableHighAccuracy: true,\n  timeout: 10000, // 10 seconds\n  maximumAge: 300000, // 5 minutes\n  watch: false,\n  immediate: false,\n};\n\nexport function useGeolocation(options: UseGeolocationOptions = {}): GeolocationState & {\n  requestLocation: () => void;\n  clearLocation: () => void;\n  watchId: number | null;\n} {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  \n  const [location, setLocation] = useState<GeolocationCoordinates | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [watchId, setWatchId] = useState<number | null>(null);\n  \n  const supported = typeof navigator !== 'undefined' && 'geolocation' in navigator;\n  \n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  \n  const handleSuccess = useCallback((position: GeolocationPosition) => {\n    const { coords } = position;\n    \n    setLocation({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      accuracy: coords.accuracy,\n      altitude: coords.altitude,\n      altitudeAccuracy: coords.altitudeAccuracy,\n      heading: coords.heading,\n      speed: coords.speed,\n    });\n    \n    setLoading(false);\n    clearError();\n    \n    // Store in localStorage for persistence\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('geolocation', JSON.stringify({\n        location: {\n          latitude: coords.latitude,\n          longitude: coords.longitude,\n          accuracy: coords.accuracy,\n        },\n        timestamp: Date.now(),\n      }));\n    }\n  }, [clearError]);\n  \n  const handleError = useCallback((error: GeolocationPositionError) => {\n    let errorMessage: string;\n    \n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = 'Location access denied by user';\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = 'Location information unavailable';\n        break;\n      case error.TIMEOUT:\n        errorMessage = 'Location request timed out';\n        break;\n      default:\n        errorMessage = 'An unknown error occurred while retrieving location';\n        break;\n    }\n    \n    setError(errorMessage);\n    setLoading(false);\n  }, []);\n  \n  const requestLocation = useCallback(() => {\n    if (!supported) {\n      setError('Geolocation is not supported by this browser');\n      return;\n    }\n    \n    setLoading(true);\n    clearError();\n    \n    const geoOptions: PositionOptions = {\n      enableHighAccuracy: opts.enableHighAccuracy,\n      timeout: opts.timeout,\n      maximumAge: opts.maximumAge,\n    };\n    \n    if (opts.watch) {\n      const id = navigator.geolocation.watchPosition(\n        handleSuccess,\n        handleError,\n        geoOptions\n      );\n      setWatchId(id);\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        handleSuccess,\n        handleError,\n        geoOptions\n      );\n    }\n  }, [supported, opts, handleSuccess, handleError, clearError]);\n  \n  const clearLocation = useCallback(() => {\n    setLocation(null);\n    setError(null);\n    setLoading(false);\n    \n    if (watchId !== null) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n    \n    // Clear from localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('geolocation');\n    }\n  }, [watchId]);\n  \n  // Load cached location on mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem('geolocation');\n      if (stored) {\n        try {\n          const { location: storedLocation, timestamp } = JSON.parse(stored);\n          \n          // Only use cached location if it's less than maximumAge old\n          const age = Date.now() - timestamp;\n          if (age < (opts.maximumAge || 300000)) {\n            setLocation(storedLocation);\n          }\n        } catch (e) {\n          console.warn('Failed to parse stored geolocation:', e);\n        }\n      }\n    }\n  }, [opts.maximumAge]);\n  \n  // Request location immediately if specified\n  useEffect(() => {\n    if (opts.immediate && !location && !loading) {\n      requestLocation();\n    }\n  }, [opts.immediate, location, loading, requestLocation]);\n  \n  // Cleanup watch on unmount\n  useEffect(() => {\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [watchId]);\n  \n  return {\n    location,\n    loading,\n    error,\n    supported,\n    requestLocation,\n    clearLocation,\n    watchId,\n  };\n}\n\n// Helper functions\nexport function calculateDistance(\n  lat1: number,\n  lng1: number,\n  lat2: number,\n  lng2: number\n): number {\n  const R = 6371; // Radius of the Earth in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) *\n    Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nexport function formatCoordinates(\n  coords: GeolocationCoordinates,\n  precision: number = 4\n): string {\n  return `${coords.latitude.toFixed(precision)}, ${coords.longitude.toFixed(precision)}`;\n}\n\nexport function isLocationWithinRadius(\n  userLocation: GeolocationCoordinates,\n  targetLocation: { latitude: number; longitude: number },\n  radiusKm: number\n): boolean {\n  const distance = calculateDistance(\n    userLocation.latitude,\n    userLocation.longitude,\n    targetLocation.latitude,\n    targetLocation.longitude\n  );\n  return distance <= radiusKm;\n}"