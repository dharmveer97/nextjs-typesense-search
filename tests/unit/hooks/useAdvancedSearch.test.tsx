import { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactNode } from 'react';\nimport { useAdvancedSearch } from '../../../hooks/useAdvancedSearch';\n\n// Create wrapper with QueryClient\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        gcTime: 0,\n      },\n    },\n  });\n  \n  return ({ children }: { children: ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('useAdvancedSearch', () => {\n  beforeEach(() => {\n    // Clear localStorage before each test\n    localStorage.clear();\n  });\n\n  it('should initialize with default state', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(() => useAdvancedSearch(), { wrapper });\n\n    expect(result.current.searchState.query).toBe('');\n    expect(result.current.searchState.collections).toEqual(['products', 'courses', 'documents']);\n    expect(result.current.searchState.mode).toBe('normal');\n    expect(result.current.searchState.page).toBe(1);\n    expect(result.current.searchState.perPage).toBe(20);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(result.current.results).toBeNull();\n  });\n\n  it('should accept initial state', () => {\n    const wrapper = createWrapper();\n    const initialState = {\n      query: 'test query',\n      mode: 'semantic' as const,\n      collections: ['products'],\n    };\n    \n    const { result } = renderHook(\n      () => useAdvancedSearch(initialState),\n      { wrapper }\n    );\n\n    expect(result.current.searchState.query).toBe('test query');\n    expect(result.current.searchState.mode).toBe('semantic');\n    expect(result.current.searchState.collections).toEqual(['products']);\n  });\n\n  it('should update search state', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(() => useAdvancedSearch(), { wrapper });\n\n    expect(result.current.searchState.query).toBe('');\n\n    // Update the query\n    result.current.updateSearchState({ query: 'new query' });\n\n    expect(result.current.searchState.query).toBe('new query');\n  });\n\n  it('should reset page when updating filters or sort', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({ page: 3 }),\n      { wrapper }\n    );\n\n    expect(result.current.searchState.page).toBe(3);\n\n    // Update filters - should reset page\n    result.current.updateSearchState({ \n      filters: { category: ['Electronics'] } \n    });\n\n    expect(result.current.searchState.page).toBe(1);\n    expect(result.current.searchState.filters).toEqual({ category: ['Electronics'] });\n  });\n\n  it('should reset page when updating sort', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({ page: 2 }),\n      { wrapper }\n    );\n\n    expect(result.current.searchState.page).toBe(2);\n\n    // Update sort - should reset page\n    result.current.updateSearchState({ sortBy: 'price:asc' });\n\n    expect(result.current.searchState.page).toBe(1);\n    expect(result.current.searchState.sortBy).toBe('price:asc');\n  });\n\n  it('should clear search state', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({ \n        query: 'test',\n        filters: { category: ['Books'] },\n        page: 2 \n      }),\n      { wrapper }\n    );\n\n    expect(result.current.searchState.query).toBe('test');\n    expect(result.current.searchState.page).toBe(2);\n\n    // Clear search\n    result.current.clearSearch();\n\n    expect(result.current.searchState.query).toBe('');\n    expect(result.current.searchState.filters).toEqual({});\n    expect(result.current.searchState.page).toBe(1);\n  });\n\n  it('should manage search history', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(() => useAdvancedSearch(), { wrapper });\n\n    expect(result.current.searchHistory).toEqual([]);\n\n    // Add to history\n    result.current.addToHistory('first query');\n    expect(result.current.searchHistory).toEqual(['first query']);\n\n    // Add another query\n    result.current.addToHistory('second query');\n    expect(result.current.searchHistory).toEqual(['second query', 'first query']);\n\n    // Add duplicate - should move to front\n    result.current.addToHistory('first query');\n    expect(result.current.searchHistory).toEqual(['first query', 'second query']);\n\n    // Clear history\n    result.current.clearHistory();\n    expect(result.current.searchHistory).toEqual([]);\n  });\n\n  it('should compute pagination info correctly', async () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({ query: 'test' }),\n      { wrapper }\n    );\n\n    // Wait for the mock search to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    // With mock data (found: 2, perPage: 20)\n    expect(result.current.totalResults).toBe(2);\n    expect(result.current.totalPages).toBe(1);\n    expect(result.current.hasNextPage).toBe(false);\n    expect(result.current.hasPrevPage).toBe(false);\n  });\n\n  it('should handle search with different modes', async () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(() => useAdvancedSearch(), { wrapper });\n\n    // Test normal search\n    await result.current.search({ \n      query: 'test',\n      mode: 'normal',\n      collections: ['products']\n    });\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.searchState.mode).toBe('normal');\n    expect(result.current.searchState.collections).toEqual(['products']);\n  });\n\n  it('should persist state to localStorage when enabled', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({}, { enablePersistence: true }),\n      { wrapper }\n    );\n\n    // Update state\n    result.current.updateSearchState({ query: 'persisted query' });\n\n    // Check localStorage\n    const stored = localStorage.getItem('advancedSearchState');\n    expect(stored).toBeTruthy();\n    \n    if (stored) {\n      const parsed = JSON.parse(stored);\n      expect(parsed.query).toBe('persisted query');\n    }\n  });\n\n  it('should load persisted state on initialization', () => {\n    // Pre-populate localStorage\n    const persistedState = {\n      query: 'loaded query',\n      mode: 'semantic',\n      collections: ['courses'],\n    };\n    localStorage.setItem('advancedSearchState', JSON.stringify(persistedState));\n\n    const wrapper = createWrapper();\n    const { result } = renderHook(\n      () => useAdvancedSearch({}, { enablePersistence: true }),\n      { wrapper }\n    );\n\n    expect(result.current.searchState.query).toBe('loaded query');\n    expect(result.current.searchState.mode).toBe('semantic');\n    expect(result.current.searchState.collections).toEqual(['courses']);\n  });\n\n  it('should handle location-based search', () => {\n    const wrapper = createWrapper();\n    const { result } = renderHook(() => useAdvancedSearch(), { wrapper });\n\n    const location = {\n      lat: 40.7128,\n      lng: -74.0060,\n      radius: 10,\n    };\n\n    result.current.updateSearchState({ location });\n\n    expect(result.current.searchState.location).toEqual(location);\n  });\n});\n\n// Test the buildFilterString helper function\ndescribe('buildFilterString helper', () => {\n  it('should build filter string correctly', () => {\n    const { buildFilterString } = require('../../../hooks/useAdvancedSearch');\n\n    // Single value filter\n    expect(buildFilterString({ category: ['Electronics'] }))\n      .toBe('category:Electronics');\n\n    // Multiple values filter\n    expect(buildFilterString({ category: ['Electronics', 'Books'] }))\n      .toBe('category:[Electronics, Books]');\n\n    // Multiple fields\n    expect(buildFilterString({ \n      category: ['Electronics'], \n      brand: ['Apple', 'Samsung']\n    })).toBe('category:Electronics && brand:[Apple, Samsung]');\n\n    // Empty filters\n    expect(buildFilterString({})).toBe('');\n    expect(buildFilterString({ category: [] })).toBe('');\n  });\n});"