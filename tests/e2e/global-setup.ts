import { chromium, FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  console.log('üöÄ Starting global setup for E2E tests...');\n  \n  // Start a browser to check if the app is ready\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  \n  try {\n    // Wait for the application to be ready\n    const baseURL = process.env.PLAYWRIGHT_TEST_BASE_URL || 'http://localhost:3000';\n    \n    // Try to access the health endpoint\n    let retries = 30; // 30 seconds\n    let isReady = false;\n    \n    while (retries > 0 && !isReady) {\n      try {\n        const response = await page.request.get(`${baseURL}/api/health`);\n        if (response.ok()) {\n          console.log('‚úÖ Application health check passed');\n          isReady = true;\n        } else {\n          console.log(`‚è≥ Waiting for app to be ready... (${retries}s remaining)`);\n          await page.waitForTimeout(1000);\n          retries--;\n        }\n      } catch (error) {\n        console.log(`‚è≥ Waiting for app to start... (${retries}s remaining)`);\n        await page.waitForTimeout(1000);\n        retries--;\n      }\n    }\n    \n    if (!isReady) {\n      throw new Error('Application did not start in time');\n    }\n    \n    // Setup test data if needed\n    console.log('üîß Setting up test data...');\n    \n    // You could add test data seeding here\n    // await seedTestData(baseURL);\n    \n    console.log('‚úÖ Global setup completed successfully');\n    \n  } catch (error) {\n    console.error('‚ùå Global setup failed:', error);\n    throw error;\n  } finally {\n    await page.close();\n    await browser.close();\n  }\n}\n\nexport default globalSetup;"