import { test, expect } from '@playwright/test';\n\ntest.describe('Search functionality', () => {\n  test.beforeEach(async ({ page }) => {\n    await page.goto('/search');\n    \n    // Wait for the page to load\n    await expect(page.locator('h1')).toContainText('Advanced Search');\n  });\n\n  test('should display search interface correctly', async ({ page }) => {\n    // Check if main elements are present\n    await expect(page.locator('input[placeholder*=\"Search\"]')).toBeVisible();\n    await expect(page.locator('button[title=\"Start voice search\"]')).toBeVisible();\n    await expect(page.getByText('Advanced Options')).toBeVisible();\n  });\n\n  test('should perform basic search', async ({ page }) => {\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    \n    // Enter search query\n    await searchInput.fill('test product');\n    await searchInput.press('Enter');\n    \n    // Wait for results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Check if results are displayed\n    await expect(page.locator('.search-result-item')).toHaveCount.greaterThan(0);\n  });\n\n  test('should show search suggestions', async ({ page }) => {\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    \n    // Start typing to trigger autocomplete\n    await searchInput.fill('test');\n    \n    // Wait for suggestions dropdown\n    await expect(page.locator('[role=\"listbox\"]')).toBeVisible({ timeout: 5000 });\n    \n    // Check if suggestions are present\n    await expect(page.locator('[role=\"option\"]')).toHaveCount.greaterThan(0);\n  });\n\n  test('should handle empty search gracefully', async ({ page }) => {\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    \n    // Submit empty search\n    await searchInput.press('Enter');\n    \n    // Should show empty state or stay on same page\n    await expect(page.locator('h1')).toContainText('Advanced Search');\n  });\n\n  test('should filter search results', async ({ page }) => {\n    // First, perform a search\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('test');\n    await searchInput.press('Enter');\n    \n    // Wait for results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Open filters\n    await page.locator('button[title=\"Toggle filters\"]').click();\n    \n    // Apply a filter (assuming category filter exists)\n    const categoryFilter = page.locator('input[type=\"checkbox\"][value=\"Electronics\"]').first();\n    if (await categoryFilter.isVisible()) {\n      await categoryFilter.check();\n      \n      // Wait for filtered results\n      await page.waitForTimeout(1000);\n      \n      // Results should update\n      await expect(page.locator('.search-result-item')).toHaveCount.greaterThan(0);\n    }\n  });\n\n  test('should change view mode', async ({ page }) => {\n    // Perform a search first\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('test');\n    await searchInput.press('Enter');\n    \n    // Wait for results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Switch to list view\n    await page.locator('button[title=\"List view\"]').click();\n    \n    // Check if view changed (this would depend on your implementation)\n    await page.waitForTimeout(500);\n    \n    // Switch back to grid view\n    await page.locator('button[title=\"Grid view\"]').click();\n    await page.waitForTimeout(500);\n  });\n\n  test('should sort search results', async ({ page }) => {\n    // Perform a search first\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('test');\n    await searchInput.press('Enter');\n    \n    // Wait for results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Change sorting\n    const sortSelect = page.locator('select').filter({ hasText: 'Relevance' });\n    if (await sortSelect.isVisible()) {\n      await sortSelect.selectOption('price:asc');\n      \n      // Wait for results to update\n      await page.waitForTimeout(1000);\n    }\n  });\n\n  test('should handle advanced search options', async ({ page }) => {\n    // Open advanced options\n    await page.getByText('Advanced Options').click();\n    \n    // Wait for advanced panel\n    await expect(page.locator('[data-testid=\"advanced-options\"]')).toBeVisible();\n    \n    // Switch to semantic search\n    await page.locator('input[value=\"semantic\"]').check();\n    \n    // Select different collections\n    await page.locator('input[value=\"products\"]').check();\n    await page.locator('input[value=\"courses\"]').uncheck();\n    \n    // Perform search with advanced options\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('advanced test');\n    await searchInput.press('Enter');\n    \n    // Check if semantic search indicator is shown\n    await expect(page.locator('.search-mode-indicator')).toContainText('semantic');\n  });\n\n  test('should handle pagination', async ({ page }) => {\n    // Perform a search that would have multiple pages\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('test');\n    await searchInput.press('Enter');\n    \n    // Wait for results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Check if pagination is available\n    const nextPageButton = page.locator('button', { hasText: 'Next' });\n    if (await nextPageButton.isVisible() && !await nextPageButton.isDisabled()) {\n      await nextPageButton.click();\n      \n      // Wait for page to update\n      await page.waitForTimeout(1000);\n      \n      // Check that page changed\n      await expect(page.locator('.page-indicator')).toContainText('2');\n    }\n  });\n});\n\ntest.describe('Voice search', () => {\n  test('should show voice search button', async ({ page }) => {\n    await page.goto('/search');\n    \n    const voiceButton = page.locator('button[title*=\"voice search\"]');\n    await expect(voiceButton).toBeVisible();\n  });\n  \n  // Note: Voice search testing would require more complex setup\n  // as it involves browser permissions and Web Speech API\n});\n\ntest.describe('Mobile search experience', () => {\n  test.use({ viewport: { width: 375, height: 667 } }); // iPhone size\n  \n  test('should be mobile responsive', async ({ page }) => {\n    await page.goto('/search');\n    \n    // Check if mobile layout is applied\n    await expect(page.locator('input[placeholder*=\"Search\"]')).toBeVisible();\n    \n    // Check if advanced options are collapsed by default on mobile\n    const advancedButton = page.getByText('Advanced Options');\n    await expect(advancedButton).toBeVisible();\n  });\n  \n  test('should handle touch interactions', async ({ page }) => {\n    await page.goto('/search');\n    \n    // Perform search\n    const searchInput = page.locator('input[placeholder*=\"Search\"]');\n    await searchInput.fill('mobile test');\n    await searchInput.press('Enter');\n    \n    // Wait for results and test touch scrolling\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Simulate scroll\n    await page.mouse.wheel(0, 300);\n    await page.waitForTimeout(500);\n  });\n});"