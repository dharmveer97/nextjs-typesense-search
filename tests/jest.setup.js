import '@testing-library/jest-dom';\nimport 'whatwg-fetch';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { server } from './mocks/server';\n\n// Polyfills for Node environment\nglobal.TextEncoder = TextEncoder;\nglobal.TextDecoder = TextDecoder;\n\n// Mock ResizeObserver\nclass MockResizeObserver {\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n}\n\nglobal.ResizeObserver = MockResizeObserver;\n\n// Mock IntersectionObserver\nclass MockIntersectionObserver {\n  constructor(callback) {\n    this.callback = callback;\n  }\n  \n  observe() {\n    // Trigger callback with mock entry\n    this.callback([{ isIntersecting: true, target: {} }]);\n  }\n  \n  unobserve() {}\n  disconnect() {}\n}\n\nglobal.IntersectionObserver = MockIntersectionObserver;\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock next/router\njest.mock('next/router', () => ({\n  useRouter() {\n    return {\n      route: '/',\n      pathname: '/',\n      query: {},\n      asPath: '/',\n      push: jest.fn(),\n      pop: jest.fn(),\n      reload: jest.fn(),\n      back: jest.fn(),\n      prefetch: jest.fn().mockResolvedValue(undefined),\n      beforePopState: jest.fn(),\n      events: {\n        on: jest.fn(),\n        off: jest.fn(),\n        emit: jest.fn(),\n      },\n      isFallback: false,\n      loading: false,\n      locale: undefined,\n      locales: undefined,\n      defaultLocale: undefined,\n      domainLocales: undefined,\n      isPreview: false,\n    };\n  },\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: jest.fn(),\n      replace: jest.fn(),\n      refresh: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      prefetch: jest.fn(),\n    };\n  },\n  useSearchParams() {\n    return new URLSearchParams();\n  },\n  usePathname() {\n    return '/';\n  },\n}));\n\n// Mock next/image\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props) => {\n    // eslint-disable-next-line jsx-a11y/alt-text\n    return <img {...props} />;\n  },\n}));\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }) => <div {...props}>{children}</div>,\n    span: ({ children, ...props }) => <span {...props}>{children}</span>,\n    button: ({ children, ...props }) => <button {...props}>{children}</button>,\n    form: ({ children, ...props }) => <form {...props}>{children}</form>,\n  },\n  AnimatePresence: ({ children }) => children,\n  useAnimation: () => ({\n    start: jest.fn(),\n    stop: jest.fn(),\n    set: jest.fn(),\n  }),\n}));\n\n// Mock Web Speech API\nconst mockSpeechRecognition = {\n  continuous: false,\n  interimResults: false,\n  lang: 'en-US',\n  start: jest.fn(),\n  stop: jest.fn(),\n  abort: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  onstart: null,\n  onend: null,\n  onresult: null,\n  onerror: null,\n};\n\nObject.defineProperty(window, 'SpeechRecognition', {\n  writable: true,\n  value: jest.fn(() => mockSpeechRecognition),\n});\n\nObject.defineProperty(window, 'webkitSpeechRecognition', {\n  writable: true,\n  value: jest.fn(() => mockSpeechRecognition),\n});\n\n// Mock Geolocation API\nconst mockGeolocation = {\n  getCurrentPosition: jest.fn().mockImplementation((success) =>\n    success({\n      coords: {\n        latitude: 51.1,\n        longitude: 45.3,\n        accuracy: 100,\n      },\n    })\n  ),\n  watchPosition: jest.fn(),\n  clearWatch: jest.fn(),\n};\n\nObject.defineProperty(navigator, 'geolocation', {\n  value: mockGeolocation,\n});\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock,\n});\n\n// Mock sessionStorage\nObject.defineProperty(window, 'sessionStorage', {\n  value: localStorageMock,\n});\n\n// Setup MSW\nbeforeAll(() => server.listen({ onUnhandledRequest: 'error' }));\nafterEach(() => {\n  server.resetHandlers();\n  jest.clearAllMocks();\n  localStorageMock.clear();\n});\nafterAll(() => server.close());\n\n// Console error/warn suppression for known issues\nconst originalError = console.error;\nconst originalWarn = console.warn;\n\nbeforeAll(() => {\n  console.error = (...args) => {\n    if (\n      typeof args[0] === 'string' &&\n      args[0].includes('Warning: ReactDOM.render is no longer supported')\n    ) {\n      return;\n    }\n    originalError.call(console, ...args);\n  };\n  \n  console.warn = (...args) => {\n    if (\n      typeof args[0] === 'string' &&\n      (\n        args[0].includes('componentWillReceiveProps') ||\n        args[0].includes('componentWillUpdate')\n      )\n    ) {\n      return;\n    }\n    originalWarn.call(console, ...args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n  console.warn = originalWarn;\n});"