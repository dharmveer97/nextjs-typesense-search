# Production Docker Compose for Typesense Application
version: '3.8'

services:
  # Typesense cluster - Production configuration
  typesense-1:
    image: typesense/typesense:29.0
    container_name: typesense-node-1
    ports:
      - "8108:8108"
    volumes:
      - typesense-data-1:/data
      - ./config/typesense/prod:/opt/typesense-server/config
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      TYPESENSE_ENABLE_CORS: "true"
      TYPESENSE_LOG_LEVEL: WARN
      TYPESENSE_PEERING_ADDRESS: typesense-1:8107
      TYPESENSE_NODES: typesense-1:8107:8108,typesense-2:8107:8108,typesense-3:8107:8108
    restart: always
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  typesense-2:
    image: typesense/typesense:29.0
    container_name: typesense-node-2
    ports:
      - "8109:8108"
    volumes:
      - typesense-data-2:/data
      - ./config/typesense/prod:/opt/typesense-server/config
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      TYPESENSE_ENABLE_CORS: "true"
      TYPESENSE_LOG_LEVEL: WARN
      TYPESENSE_PEERING_ADDRESS: typesense-2:8107
      TYPESENSE_NODES: typesense-1:8107:8108,typesense-2:8107:8108,typesense-3:8107:8108
    restart: always
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  typesense-3:
    image: typesense/typesense:29.0
    container_name: typesense-node-3
    ports:
      - "8110:8108"
    volumes:
      - typesense-data-3:/data
      - ./config/typesense/prod:/opt/typesense-server/config
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      TYPESENSE_ENABLE_CORS: "true"
      TYPESENSE_LOG_LEVEL: WARN
      TYPESENSE_PEERING_ADDRESS: typesense-3:8107
      TYPESENSE_NODES: typesense-1:8107:8108,typesense-2:8107:8108,typesense-3:8107:8108
    restart: always
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Redis Cluster for high availability
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
      - ./config/redis/master.conf:/etc/redis/redis.conf
    environment:
      REDIS_REPLICATION_MODE: master
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    restart: always
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 15s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --slaveof redis-master 6379
    ports:
      - "6380:6379"
    volumes:
      - redis-replica-data:/data
      - ./config/redis/replica.conf:/etc/redis/redis.conf
    environment:
      REDIS_REPLICATION_MODE: slave
      REDIS_MASTER_HOST: redis-master
      REDIS_MASTER_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      redis-master:
        condition: service_healthy
    restart: always
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 15s
      timeout: 3s
      retries: 5

  # Next.js application instances for load balancing
  app-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: typesense-app-1
    environment:
      NODE_ENV: production
      INSTANCE_ID: "app-1"
      # Typesense Configuration - Load balanced
      TYPESENSE_HOST: typesense-1,typesense-2,typesense-3
      TYPESENSE_PORT: 8108
      TYPESENSE_PROTOCOL: http
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      # Public Configuration
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_TYPESENSE_HOST: ${NEXT_PUBLIC_TYPESENSE_HOST}
      NEXT_PUBLIC_TYPESENSE_PORT: ${NEXT_PUBLIC_TYPESENSE_PORT}
      NEXT_PUBLIC_TYPESENSE_PROTOCOL: ${NEXT_PUBLIC_TYPESENSE_PROTOCOL}
      NEXT_PUBLIC_TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      REDIS_REPLICA_URL: redis://:${REDIS_PASSWORD}@redis-replica:6379
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # Rate Limiting
      RATE_LIMIT_RPM: 500
      RATE_LIMIT_RPH: 5000
      # Monitoring
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      typesense-1:
        condition: service_healthy
      typesense-2:
        condition: service_healthy
      typesense-3:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  app-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: typesense-app-2
    environment:
      NODE_ENV: production
      INSTANCE_ID: "app-2"
      # Same environment as app-1
      TYPESENSE_HOST: typesense-1,typesense-2,typesense-3
      TYPESENSE_PORT: 8108
      TYPESENSE_PROTOCOL: http
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_TYPESENSE_HOST: ${NEXT_PUBLIC_TYPESENSE_HOST}
      NEXT_PUBLIC_TYPESENSE_PORT: ${NEXT_PUBLIC_TYPESENSE_PORT}
      NEXT_PUBLIC_TYPESENSE_PROTOCOL: ${NEXT_PUBLIC_TYPESENSE_PROTOCOL}
      NEXT_PUBLIC_TYPESENSE_SEARCH_ONLY_API_KEY: ${TYPESENSE_SEARCH_ONLY_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      REDIS_REPLICA_URL: redis://:${REDIS_PASSWORD}@redis-replica:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      RATE_LIMIT_RPM: 500
      RATE_LIMIT_RPH: 5000
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      typesense-1:
        condition: service_healthy
      typesense-2:
        condition: service_healthy
      typesense-3:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./config/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    environment:
      NGINX_HOST: ${NGINX_HOST}
    depends_on:
      - app-1
      - app-2
    networks:
      - prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: "Viewer"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  promtail:
    image: grafana/promtail:latest
    container_name: promtail-prod
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - prod-network
    restart: always

# Production volumes with backup considerations
volumes:
  typesense-data-1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/typesense/node-1
  typesense-data-2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/typesense/node-2
  typesense-data-3:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/typesense/node-3
  redis-master-data:
    driver: local
  redis-replica-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16