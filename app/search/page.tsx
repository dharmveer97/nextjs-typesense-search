'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MagnifyingGlassIcon,\n  AdjustmentsHorizontalIcon,\n  SparklesIcon,\n  MapPinIcon,\n  ClockIcon,\n  ChartBarIcon,\n  EyeIcon,\n} from '@heroicons/react/24/outline';\nimport AdvancedSearchBar from '../../components/search/AdvancedSearchBar';\nimport SearchResults from '../../components/search/SearchResults';\nimport { useAdvancedSearch } from '../../hooks/useAdvancedSearch';\nimport { useGeolocation } from '../../hooks/useGeolocation';\n\nexport default function SearchPage() {\n  const searchParams = useSearchParams();\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  \n  // Initialize search with URL parameters\n  const initialQuery = searchParams?.get('q') || '';\n  const initialCollections = searchParams?.get('collections')?.split(',') || ['products', 'courses', 'documents'];\n  const initialMode = (searchParams?.get('mode') as any) || 'normal';\n  \n  const {\n    searchState,\n    results,\n    loading,\n    error,\n    search,\n    updateSearchState,\n    clearSearch,\n    searchTime,\n    totalResults,\n    totalPages,\n    hasNextPage,\n    hasPrevPage,\n    searchHistory,\n    addToHistory,\n  } = useAdvancedSearch(\n    {\n      query: initialQuery,\n      collections: initialCollections,\n      mode: initialMode,\n    },\n    {\n      enableAutoSearch: false,\n      enablePersistence: true,\n      trackAnalytics: true,\n      debounceMs: 300,\n    }\n  );\n  \n  // Geolocation hook for location-based search\n  const { location, loading: locationLoading, error: locationError, requestLocation } = useGeolocation();\n  \n  // Load recent searches from localStorage\n  useEffect(() => {\n    const stored = localStorage.getItem('recentSearches');\n    if (stored) {\n      setRecentSearches(JSON.parse(stored));\n    }\n  }, []);\n  \n  // Update URL when search state changes\n  useEffect(() => {\n    if (typeof window !== 'undefined' && searchState.query) {\n      const params = new URLSearchParams();\n      params.set('q', searchState.query);\n      if (searchState.collections.join(',') !== 'products,courses,documents') {\n        params.set('collections', searchState.collections.join(','));\n      }\n      if (searchState.mode !== 'normal') {\n        params.set('mode', searchState.mode);\n      }\n      \n      const newUrl = `/search?${params.toString()}`;\n      window.history.replaceState({}, '', newUrl);\n    }\n  }, [searchState.query, searchState.collections, searchState.mode]);\n  \n  const handleSearch = async (query: string, options?: any) => {\n    addToHistory(query);\n    \n    const searchParams: any = {\n      query: query.trim(),\n    };\n    \n    // Apply search options\n    if (options) {\n      if (options.mode) {\n        searchParams.mode = options.mode;\n      }\n      if (options.collections) {\n        searchParams.collections = options.collections;\n      }\n      if (options.location && location) {\n        searchParams.location = {\n          lat: location.latitude,\n          lng: location.longitude,\n          radius: 10, // 10km default\n        };\n      }\n    }\n    \n    await search(searchParams);\n  };\n  \n  const handlePageChange = (page: number) => {\n    updateSearchState({ page });\n  };\n  \n  const handleSortChange = (sortBy: string) => {\n    updateSearchState({ sortBy });\n  };\n  \n  const handleFilterChange = (filters: Record<string, string[]>) => {\n    updateSearchState({ filters });\n  };\n  \n  const handleModeChange = (mode: 'normal' | 'semantic' | 'vector' | 'federated') => {\n    updateSearchState({ mode });\n  };\n  \n  const handleCollectionChange = (collections: string[]) => {\n    updateSearchState({ collections });\n  };\n  \n  const handleLocationSearch = () => {\n    if (location) {\n      updateSearchState({\n        location: {\n          lat: location.latitude,\n          lng: location.longitude,\n          radius: 10,\n        }\n      });\n    } else {\n      requestLocation();\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-3 rounded-xl\">\n                <MagnifyingGlassIcon className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Advanced Search</h1>\n                <p className=\"text-gray-600\">Search across products, courses, and documentation</p>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n                showAdvanced \n                  ? 'bg-blue-100 text-blue-700' \n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              <AdjustmentsHorizontalIcon className=\"w-4 h-4\" />\n              Advanced Options\n            </button>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"relative\">\n            <AdvancedSearchBar\n              onSearch={handleSearch}\n              onClear={clearSearch}\n              placeholder=\"Search products, courses, and documentation...\"\n              showVoiceSearch={true}\n              showSemanticSearch={true}\n              enableAutoSearch={false}\n              collections={searchState.collections}\n              recentSearches={searchHistory}\n              onRecentSearchClick={handleSearch}\n            />\n          </div>\n          \n          {/* Advanced Options Panel */}\n          <AnimatePresence>\n            {showAdvanced && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: 'auto', opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"mt-6 p-6 bg-gray-50 rounded-xl\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {/* Search Mode */}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Search Mode\n                      </label>\n                      <div className=\"space-y-2\">\n                        {[\n                          { value: 'normal', label: 'Normal Search', icon: MagnifyingGlassIcon },\n                          { value: 'semantic', label: 'Semantic Search', icon: SparklesIcon },\n                          { value: 'federated', label: 'Multi-Collection', icon: ChartBarIcon },\n                        ].map((option) => {\n                          const Icon = option.icon;\n                          return (\n                            <label key={option.value} className=\"flex items-center gap-3 cursor-pointer\">\n                              <input\n                                type=\"radio\"\n                                name=\"searchMode\"\n                                value={option.value}\n                                checked={searchState.mode === option.value}\n                                onChange={(e) => handleModeChange(e.target.value as any)}\n                                className=\"text-blue-600 focus:ring-blue-500\"\n                              />\n                              <Icon className=\"w-4 h-4 text-gray-500\" />\n                              <span className=\"text-sm text-gray-700\">{option.label}</span>\n                            </label>\n                          );\n                        })}\n                      </div>\n                    </div>\n                    \n                    {/* Collections */}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Search In\n                      </label>\n                      <div className=\"space-y-2\">\n                        {[\n                          { value: 'products', label: 'Products' },\n                          { value: 'courses', label: 'Courses' },\n                          { value: 'documents', label: 'Documentation' },\n                        ].map((option) => (\n                          <label key={option.value} className=\"flex items-center gap-3 cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              value={option.value}\n                              checked={searchState.collections.includes(option.value)}\n                              onChange={(e) => {\n                                const collections = e.target.checked\n                                  ? [...searchState.collections, option.value]\n                                  : searchState.collections.filter(c => c !== option.value);\n                                handleCollectionChange(collections);\n                              }}\n                              className=\"rounded text-blue-600 focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm text-gray-700\">{option.label}</span>\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Location */}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Location\n                      </label>\n                      <div className=\"space-y-2\">\n                        <button\n                          onClick={handleLocationSearch}\n                          disabled={locationLoading}\n                          className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm transition-colors ${\n                            location\n                              ? 'bg-green-100 text-green-700'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          } ${locationLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        >\n                          <MapPinIcon className=\"w-4 h-4\" />\n                          {locationLoading ? 'Getting location...' :\n                           location ? 'Location enabled' : \n                           'Enable location search'}\n                        </button>\n                        \n                        {location && (\n                          <div className=\"text-xs text-gray-600\">\n                            Lat: {location.latitude.toFixed(4)}, Lng: {location.longitude.toFixed(4)}\n                          </div>\n                        )}\n                        \n                        {locationError && (\n                          <div className=\"text-xs text-red-600\">\n                            {locationError}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n      \n      {/* Search Statistics */}\n      {(searchState.query || results) && (\n        <div className=\"bg-white border-b border-gray-200\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-6 text-sm text-gray-600\">\n                {searchState.query && (\n                  <div className=\"flex items-center gap-2\">\n                    <MagnifyingGlassIcon className=\"w-4 h-4\" />\n                    <span>Searching for: <strong>\"{searchState.query}\"</strong></span>\n                  </div>\n                )}\n                \n                {totalResults > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <EyeIcon className=\"w-4 h-4\" />\n                    <span>{totalResults.toLocaleString()} results</span>\n                  </div>\n                )}\n                \n                {searchTime > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <ClockIcon className=\"w-4 h-4\" />\n                    <span>in {searchTime}ms</span>\n                  </div>\n                )}\n                \n                <div className=\"flex items-center gap-2\">\n                  <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs ${\n                    searchState.mode === 'semantic' ? 'bg-purple-100 text-purple-700' :\n                    searchState.mode === 'federated' ? 'bg-blue-100 text-blue-700' :\n                    'bg-gray-100 text-gray-700'\n                  }`}>\n                    {searchState.mode === 'semantic' && <SparklesIcon className=\"w-3 h-3\" />}\n                    {searchState.mode === 'federated' && <ChartBarIcon className=\"w-3 h-3\" />}\n                    {searchState.mode === 'normal' && <MagnifyingGlassIcon className=\"w-3 h-3\" />}\n                    {searchState.mode} search\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                <span>Collections: {searchState.collections.join(', ')}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome/Empty State */}\n        {!searchState.query && !results && (\n          <div className=\"text-center py-12\">\n            <div className=\"bg-white rounded-2xl shadow-sm p-12 max-w-2xl mx-auto\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <MagnifyingGlassIcon className=\"w-10 h-10 text-white\" />\n              </div>\n              \n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Discover Everything You Need\n              </h2>\n              \n              <p className=\"text-gray-600 mb-8\">\n                Search across our comprehensive database of products, courses, and documentation.\n                Use advanced features like semantic search, voice input, and location-based results.\n              </p>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8\">\n                <div className=\"text-center p-4 rounded-lg bg-blue-50\">\n                  <div className=\"bg-blue-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <SparklesIcon className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Semantic Search</h3>\n                  <p className=\"text-sm text-gray-600\">Find results by meaning, not just keywords</p>\n                </div>\n                \n                <div className=\"text-center p-4 rounded-lg bg-green-50\">\n                  <div className=\"bg-green-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <MapPinIcon className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Location Aware</h3>\n                  <p className=\"text-sm text-gray-600\">Get results based on your location</p>\n                </div>\n                \n                <div className=\"text-center p-4 rounded-lg bg-purple-50\">\n                  <div className=\"bg-purple-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <ChartBarIcon className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Multi-Collection</h3>\n                  <p className=\"text-sm text-gray-600\">Search across all content types</p>\n                </div>\n              </div>\n              \n              {/* Recent Searches */}\n              {searchHistory.length > 0 && (\n                <div className=\"text-left\">\n                  <h3 className=\"font-medium text-gray-900 mb-3\">Recent Searches</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {searchHistory.slice(0, 8).map((query, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleSearch(query)}\n                        className=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors\"\n                      >\n                        {query}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Search Results */}\n        {(searchState.query || results) && (\n          <SearchResults\n            results={results}\n            loading={loading}\n            error={error}\n            query={searchState.query}\n            searchTime={searchTime}\n            totalResults={totalResults}\n            currentPage={searchState.page}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n            onSortChange={handleSortChange}\n            onFilterChange={handleFilterChange}\n            viewMode={viewMode}\n            onViewModeChange={setViewMode}\n            showFacets={true}\n            enablePersonalization={true}\n          />\n        )}\n      </div>\n    </div>\n  );\n}"